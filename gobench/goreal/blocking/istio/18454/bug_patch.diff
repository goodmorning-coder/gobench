diff --git a/galley/pkg/runtime/processor_test.go b/galley/pkg/runtime/processor_test.go
index 8bb267fbe..77f25dbb3 100644
--- a/galley/pkg/runtime/processor_test.go
+++ b/galley/pkg/runtime/processor_test.go
@@ -106,6 +106,68 @@ func TestProcessor_Stop(t *testing.T) {
 	p.Stop()
 }
 
+func TestProcessor_EventAccumulation(t *testing.T) {
+	// Set the log level to debug for codecov.
+	prevLevel := setDebugLogLevel()
+	defer restoreLogLevel(prevLevel)
+
+	src := NewInMemorySource()
+	distributor := NewInMemoryDistributor()
+	// Do not quiesce/timeout for an hour
+	stateStrategy := publish.NewStrategy(time.Hour, time.Hour, time.Millisecond)
+
+	p := newTestProcessor(src, stateStrategy, distributor, nil)
+	err := p.Start()
+	if err != nil {
+		t.Fatalf("unexpected error: %v", err)
+	}
+	defer p.Stop()
+
+	awaitFullSync(t, p)
+
+	k1 := resource.Key{Collection: resources.EmptyInfo.Collection, FullName: resource.FullNameFromNamespaceAndName("", "r1")}
+	src.Set(k1, resource.Metadata{}, &types.Empty{})
+
+	// Wait "long enough"
+	time.Sleep(time.Second * 1)
+
+	if distributor.NumSnapshots() != 0 {
+		t.Fatalf("snapshot shouldn't have been distributed: %+v", distributor)
+	}
+}
+
+func TestProcessor_EventAccumulation_WithFullSync(t *testing.T) {
+	// Set the log level to debug for codecov.
+	prevLevel := setDebugLogLevel()
+	defer restoreLogLevel(prevLevel)
+
+	info, _ := resources.TestSchema.Lookup("empty")
+
+	src := NewInMemorySource()
+	distributor := NewInMemoryDistributor()
+	// Do not quiesce/timeout for an hour
+	stateStrategy := publish.NewStrategy(time.Hour, time.Hour, time.Millisecond)
+
+	p := newTestProcessor(src, stateStrategy, distributor, nil)
+	err := p.Start()
+	if err != nil {
+		t.Fatalf("unexpected error: %v", err)
+	}
+	defer p.Stop()
+
+	awaitFullSync(t, p)
+
+	k1 := resource.Key{Collection: info.Collection, FullName: resource.FullNameFromNamespaceAndName("", "r1")}
+	src.Set(k1, resource.Metadata{}, &types.Empty{})
+
+	// Wait "long enough"
+	time.Sleep(time.Second * 1)
+
+	if distributor.NumSnapshots() != 0 {
+		t.Fatalf("snapshot shouldn't have been distributed: %+v", distributor)
+	}
+}
+
 func TestProcessor_Publishing(t *testing.T) {
 	// Set the log level to debug for codecov.
 	prevLevel := setDebugLogLevel()
@@ -121,7 +183,7 @@ func TestProcessor_Publishing(t *testing.T) {
 	hookFn := func() {
 		processCallCount.Done()
 	}
-	processCallCount.Add(2) // 1 for sync, 1 for publish trigger
+	processCallCount.Add(3) // 1 for add, 1 for sync, 1 for publish trigger
 
 	p := newTestProcessor(src, stateStrategy, distributor, hookFn)
 	err := p.Start()
@@ -132,13 +194,6 @@ func TestProcessor_Publishing(t *testing.T) {
 
 	awaitFullSync(t, p)
 
-	// Wait for up to 5 seconds.
-	if err := timedfn.WithTimeout(processCallCount.Wait, timeout); err != nil {
-		t.Fatal(err)
-	}
-
-	processCallCount.Add(2) // 1 for add, 1 for publish trigger
-
 	k1 := resource.Key{Collection: info.Collection, FullName: resource.FullNameFromNamespaceAndName("", "r1")}
 	src.Set(k1, resource.Metadata{}, &types.Empty{})
 
diff --git a/galley/pkg/runtime/publish/strategy.go b/galley/pkg/runtime/publish/strategy.go
index 5bb8b7839..a40e6effa 100644
--- a/galley/pkg/runtime/publish/strategy.go
+++ b/galley/pkg/runtime/publish/strategy.go
@@ -142,10 +142,7 @@ func (s *Strategy) startTimer() {
 			case <-s.resetChan:
 				// Reset should be invoked only on stopped or expired timers with drained channels.
 				if !s.timer.Stop() {
-					select {
-					case <-s.timer.C:
-					default:
-					}
+					<-s.timer.C
 				}
 				s.timer.Reset(s.timerFrequency)
 			case <-ctx.Done():
