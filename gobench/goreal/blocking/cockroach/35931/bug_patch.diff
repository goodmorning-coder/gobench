diff --git a/pkg/sql/distsqlrun/flow.go b/pkg/sql/distsqlrun/flow.go
index 41d6e597fe..c70eaa2bf4 100644
--- a/pkg/sql/distsqlrun/flow.go
+++ b/pkg/sql/distsqlrun/flow.go
@@ -702,13 +702,11 @@ func (f *Flow) cancel() {
 	f.flowRegistry.Unlock()
 
 	for _, receiver := range timedOutReceivers {
-		go func(receiver RowReceiver) {
-			// Stream has yet to be started; send an error to its
-			// receiver and prevent it from being connected.
-			receiver.Push(
-				nil, /* row */
-				&ProducerMetadata{Err: sqlbase.QueryCanceledError})
-			receiver.ProducerDone()
-		}(receiver)
+		// Stream has yet to be started; send an error to its
+		// receiver and prevent it from being connected.
+		receiver.Push(
+			nil, /* row */
+			&ProducerMetadata{Err: sqlbase.QueryCanceledError})
+		receiver.ProducerDone()
 	}
 }
diff --git a/pkg/sql/distsqlrun/flow_registry.go b/pkg/sql/distsqlrun/flow_registry.go
index d199df178b..ac819ea055 100644
--- a/pkg/sql/distsqlrun/flow_registry.go
+++ b/pkg/sql/distsqlrun/flow_registry.go
@@ -215,6 +215,7 @@ func (fr *flowRegistry) RegisterFlow(
 			// error to its consumer after fr.Unlock; the error will propagate and
 			// eventually drain all the processors.
 			timedOutReceivers := fr.cancelPendingStreamsLocked(id)
+			fmt.Println("Timed out rec", timedOutReceivers)
 			fr.Unlock()
 			if len(timedOutReceivers) != 0 {
 				// The span in the context might be finished by the time this runs. In
@@ -230,12 +231,10 @@ func (fr *flowRegistry) RegisterFlow(
 				)
 			}
 			for _, r := range timedOutReceivers {
-				go func(r RowReceiver) {
-					r.Push(
-						nil, /* row */
-						&ProducerMetadata{Err: errNoInboundStreamConnection})
-					r.ProducerDone()
-				}(r)
+				r.Push(
+					nil, /* row */
+					&ProducerMetadata{Err: errNoInboundStreamConnection})
+				r.ProducerDone()
 			}
 		})
 	}
@@ -258,7 +257,7 @@ func (fr *flowRegistry) cancelPendingStreamsLocked(id distsqlpb.FlowID) []RowRec
 		// Connected, non-finished inbound streams will get an error
 		// returned in ProcessInboundStream(). Non-connected streams
 		// are handled below.
-		if !is.connected && !is.finished && !is.canceled {
+		if !is.connected && !is.finished {
 			is.canceled = true
 			pendingReceivers = append(pendingReceivers, is.receiver)
 			fr.finishInboundStreamLocked(id, streamID)
