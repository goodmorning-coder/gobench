diff --git a/tpl/tplimpl/template_resources.go b/tpl/tplimpl/template_resources.go
index f10aa72e..48a79d06 100644
--- a/tpl/tplimpl/template_resources.go
+++ b/tpl/tplimpl/template_resources.go
@@ -36,7 +36,6 @@ var (
 	remoteURLLock = &remoteLock{m: make(map[string]*sync.Mutex)}
 	resSleep      = time.Second * 2 // if JSON decoding failed sleep for n seconds before retrying
 	resRetries    = 1               // number of retries to load the JSON from URL or local file system
-	resCacheMu    sync.RWMutex
 )
 
 type remoteLock struct {
@@ -50,8 +49,8 @@ func (l *remoteLock) URLLock(url string) {
 	if _, ok := l.m[url]; !ok {
 		l.m[url] = &sync.Mutex{}
 	}
-	l.Unlock()
 	l.m[url].Lock()
+	l.Unlock()
 }
 
 // URLUnlock unlocks an URL when the download has been finished. Use only in defer calls.
@@ -71,9 +70,6 @@ func getCacheFileID(cfg config.Provider, id string) string {
 // resGetCache returns the content for an ID from the file cache or an error
 // if the file is not found returns nil,nil
 func resGetCache(id string, fs afero.Fs, cfg config.Provider, ignoreCache bool) ([]byte, error) {
-	resCacheMu.RLock()
-	defer resCacheMu.RUnlock()
-
 	if ignoreCache {
 		return nil, nil
 	}
@@ -92,9 +88,6 @@ func resGetCache(id string, fs afero.Fs, cfg config.Provider, ignoreCache bool)
 
 // resWriteCache writes bytes to an ID into the file cache
 func resWriteCache(id string, c []byte, fs afero.Fs, cfg config.Provider, ignoreCache bool) error {
-	resCacheMu.Lock()
-	defer resCacheMu.Unlock()
-
 	if ignoreCache {
 		return nil
 	}
