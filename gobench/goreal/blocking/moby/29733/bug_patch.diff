diff --git a/integration-cli/docker_cli_external_graphdriver_unix_test.go b/integration-cli/docker_cli_external_graphdriver_unix_test.go
index 152bc6aa63..a700f82a8a 100644
--- a/integration-cli/docker_cli_external_graphdriver_unix_test.go
+++ b/integration-cli/docker_cli_external_graphdriver_unix_test.go
@@ -57,10 +57,6 @@ func (s *DockerExternalGraphdriverSuite) SetUpTest(c *check.C) {
 	})
 }
 
-func (s *DockerExternalGraphdriverSuite) OnTimeout(c *check.C) {
-	s.d.DumpStackAndQuit()
-}
-
 func (s *DockerExternalGraphdriverSuite) TearDownTest(c *check.C) {
 	if s.d != nil {
 		s.d.Stop(c)
diff --git a/pkg/plugins/plugin_test.go b/pkg/plugins/plugin_test.go
index ac810565f7..e744af331f 100644
--- a/pkg/plugins/plugin_test.go
+++ b/pkg/plugins/plugin_test.go
@@ -1,8 +1,10 @@
 package plugins
 
 import (
+	"fmt"
 	"path/filepath"
 	"runtime"
+	"runtime/debug"
 	"sync"
 	"testing"
 	"time"
@@ -30,7 +32,8 @@ func testActive(t *testing.T, p *Plugin) {
 	select {
 	case <-time.After(100 * time.Millisecond):
 		_, f, l, _ := runtime.Caller(1)
-		t.Fatalf("%s:%d: deadlock in waitActive", filepath.Base(f), l)
+		debug.SetTraceback("all")
+		panic(fmt.Sprintf("%s:%d: deadlock in waitActive", filepath.Base(f), l))
 	case <-done:
 	}
 
diff --git a/pkg/plugins/plugins.go b/pkg/plugins/plugins.go
index 125e6c7d66..acfb209992 100644
--- a/pkg/plugins/plugins.go
+++ b/pkg/plugins/plugins.go
@@ -70,12 +70,12 @@ type Plugin struct {
 	// Manifest of the plugin (see above)
 	Manifest *Manifest `json:"-"`
 
-	// wait for activation to finish
-	activateWait *sync.Cond
 	// error produced by activation
 	activateErr error
-	// keeps track of callback handlers run against this plugin
-	handlersRun bool
+	// specifies if the activation sequence is completed (not if it is successful or not)
+	activated bool
+	// wait for activation to finish
+	activateWait *sync.Cond
 }
 
 // BasePath returns the path to which all paths returned by the plugin are relative to.
@@ -112,51 +112,19 @@ func NewLocalPlugin(name, addr string) *Plugin {
 
 func (p *Plugin) activate() error {
 	p.activateWait.L.Lock()
-
-	if p.activated() {
-		p.runHandlers()
+	if p.activated {
 		p.activateWait.L.Unlock()
 		return p.activateErr
 	}
 
 	p.activateErr = p.activateWithLock()
+	p.activated = true
 
-	p.runHandlers()
 	p.activateWait.L.Unlock()
 	p.activateWait.Broadcast()
 	return p.activateErr
 }
 
-// runHandlers runs the registered handlers for the implemented plugin types
-// This should only be run after activation, and while the activation lock is held.
-func (p *Plugin) runHandlers() {
-	if !p.activated() {
-		return
-	}
-
-	handlers.RLock()
-	if !p.handlersRun {
-		for _, iface := range p.Manifest.Implements {
-			hdlrs, handled := handlers.extpointHandlers[iface]
-			if !handled {
-				continue
-			}
-			for _, handler := range hdlrs {
-				handler(p.name, p.client)
-			}
-		}
-		p.handlersRun = true
-	}
-	handlers.RUnlock()
-
-}
-
-// activated returns if the plugin has already been activated.
-// This should only be called with the activation lock held
-func (p *Plugin) activated() bool {
-	return p.Manifest != nil
-}
-
 func (p *Plugin) activateWithLock() error {
 	c, err := NewClient(p.Addr, p.TLSConfig)
 	if err != nil {
@@ -170,12 +138,24 @@ func (p *Plugin) activateWithLock() error {
 	}
 
 	p.Manifest = m
+
+	handlers.RLock()
+	for _, iface := range m.Implements {
+		hdlrs, handled := handlers.extpointHandlers[iface]
+		if !handled {
+			continue
+		}
+		for _, handler := range hdlrs {
+			handler(p.name, p.client)
+		}
+	}
+	handlers.RUnlock()
 	return nil
 }
 
 func (p *Plugin) waitActive() error {
 	p.activateWait.L.Lock()
-	for !p.activated() {
+	for !p.activated {
 		p.activateWait.Wait()
 	}
 	p.activateWait.L.Unlock()
@@ -183,7 +163,7 @@ func (p *Plugin) waitActive() error {
 }
 
 func (p *Plugin) implements(kind string) bool {
-	if p.Manifest == nil {
+	if err := p.waitActive(); err != nil {
 		return false
 	}
 	for _, driver := range p.Manifest.Implements {
@@ -252,7 +232,7 @@ func Get(name, imp string) (*Plugin, error) {
 	if err != nil {
 		return nil, err
 	}
-	if err := pl.waitActive(); err == nil && pl.implements(imp) {
+	if pl.implements(imp) {
 		logrus.Debugf("%s implements: %s", name, imp)
 		return pl, nil
 	}
@@ -269,17 +249,9 @@ func Handle(iface string, fn func(string, *Client)) {
 
 	hdlrs = append(hdlrs, fn)
 	handlers.extpointHandlers[iface] = hdlrs
-
-	storage.Lock()
 	for _, p := range storage.plugins {
-		p.activateWait.L.Lock()
-		if p.activated() && p.implements(iface) {
-			p.handlersRun = false
-		}
-		p.activateWait.L.Unlock()
+		p.activated = false
 	}
-	storage.Unlock()
-
 	handlers.Unlock()
 }
 
@@ -320,7 +292,7 @@ func GetAll(imp string) ([]*Plugin, error) {
 			logrus.Error(pl.err)
 			continue
 		}
-		if err := pl.pl.waitActive(); err == nil && pl.pl.implements(imp) {
+		if pl.pl.implements(imp) {
 			out = append(out, pl.pl)
 		}
 	}
