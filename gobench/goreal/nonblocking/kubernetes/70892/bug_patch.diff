diff --git a/pkg/scheduler/core/generic_scheduler.go b/pkg/scheduler/core/generic_scheduler.go
index b60e3bf7bd5..feed37bb86d 100644
--- a/pkg/scheduler/core/generic_scheduler.go
+++ b/pkg/scheduler/core/generic_scheduler.go
@@ -653,38 +653,33 @@ func PrioritizeNodes(
 
 	results := make([]schedulerapi.HostPriorityList, len(priorityConfigs), len(priorityConfigs))
 
-	// DEPRECATED: we can remove this when all priorityConfigs implement the
-	// Map-Reduce pattern.
-	workqueue.ParallelizeUntil(context.TODO(), 16, len(priorityConfigs), func(i int) {
-		priorityConfig := priorityConfigs[i]
-		if priorityConfig.Function == nil {
-			results[i] = make(schedulerapi.HostPriorityList, len(nodes))
-			return
-		}
-
-		var err error
-		results[i], err = priorityConfig.Function(pod, nodeNameToInfo, nodes)
-		if err != nil {
-			appendError(err)
-		}
-	})
+	for i := range priorityConfigs {
+		results[i] = make(schedulerapi.HostPriorityList, len(nodes))
+	}
 
-	workqueue.ParallelizeUntil(context.TODO(), 16, len(nodes), func(index int) {
+	processNode := func(index int) {
 		nodeInfo := nodeNameToInfo[nodes[index].Name]
+		var err error
 		for i, priorityConfig := range priorityConfigs {
-			if priorityConfig.Function != nil {
+			// DEPRECATED when ALL priorityConfigs have Map-Reduce pattern.
+			if priorityConfigs[i].Function != nil {
+				// Make sure that the old-style priority function only runs once.
+				if results[i][0].Host == "" {
+					results[i], err = priorityConfig.Function(pod, nodeNameToInfo, nodes)
+					if err != nil {
+						appendError(err)
+					}
+				}
 				continue
 			}
-
-			var err error
 			results[i][index], err = priorityConfigs[i].Map(pod, meta, nodeInfo)
 			if err != nil {
 				appendError(err)
 				results[i][index].Host = nodes[index].Name
 			}
 		}
-	})
-
+	}
+	workqueue.ParallelizeUntil(context.TODO(), 16, len(nodes), processNode)
 	for i, priorityConfig := range priorityConfigs {
 		if priorityConfig.Reduce == nil {
 			continue
