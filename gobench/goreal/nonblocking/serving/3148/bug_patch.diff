diff --git a/pkg/reconciler/v1alpha1/revision/revision_test.go b/pkg/reconciler/v1alpha1/revision/revision_test.go
index 8a6cf8797..a7591690c 100644
--- a/pkg/reconciler/v1alpha1/revision/revision_test.go
+++ b/pkg/reconciler/v1alpha1/revision/revision_test.go
@@ -38,6 +38,7 @@ import (
 	"github.com/knative/pkg/configmap"
 	ctrl "github.com/knative/pkg/controller"
 	"github.com/knative/pkg/kmeta"
+	tlogging "github.com/knative/pkg/test/logging"
 	kpav1alpha1 "github.com/knative/serving/pkg/apis/autoscaling/v1alpha1"
 	"github.com/knative/serving/pkg/apis/serving"
 	"github.com/knative/serving/pkg/apis/serving/v1alpha1"
@@ -50,8 +51,8 @@ import (
 	"github.com/knative/serving/pkg/reconciler/v1alpha1/revision/config"
 	"github.com/knative/serving/pkg/reconciler/v1alpha1/revision/resources"
 	resourcenames "github.com/knative/serving/pkg/reconciler/v1alpha1/revision/resources/names"
-	. "github.com/knative/serving/pkg/reconciler/v1alpha1/testing"
 	"github.com/knative/serving/pkg/system"
+	ktest "github.com/knative/serving/test"
 	"golang.org/x/sync/errgroup"
 	appsv1 "k8s.io/api/apps/v1"
 	corev1 "k8s.io/api/core/v1"
@@ -62,6 +63,8 @@ import (
 	fakedynamic "k8s.io/client-go/dynamic/fake"
 	kubeinformers "k8s.io/client-go/informers"
 	fakekubeclientset "k8s.io/client-go/kubernetes/fake"
+
+	. "github.com/knative/serving/pkg/reconciler/v1alpha1/testing"
 )
 
 func getTestConfiguration() *v1alpha1.Configuration {
@@ -538,7 +541,7 @@ func TestIstioOutboundIPRangesInjection(t *testing.T) {
 	want := "10.10.10.0/24"
 	annotations = getPodAnnotationsForConfig(t, in, "")
 	if got := annotations[resources.IstioOutboundIPRangeAnnotation]; want != got {
-		t.Fatalf("%v annotation expected to be %v, but is %v.", resources.IstioOutboundIPRangeAnnotation, want, got)
+		t.Fatalf("%v annotation = %v, want: %v.", resources.IstioOutboundIPRangeAnnotation, got, want)
 	}
 
 	// Multiple valid ranges with whitespaces
@@ -546,7 +549,7 @@ func TestIstioOutboundIPRangesInjection(t *testing.T) {
 	want = "10.10.10.0/24,10.240.10.0/14,192.192.10.0/16"
 	annotations = getPodAnnotationsForConfig(t, in, "")
 	if got := annotations[resources.IstioOutboundIPRangeAnnotation]; want != got {
-		t.Fatalf("%v annotation expected to be %v, but is %v.", resources.IstioOutboundIPRangeAnnotation, want, got)
+		t.Fatalf("%v annotation = %v, want: %v", resources.IstioOutboundIPRangeAnnotation, got, want)
 	}
 
 	// An invalid IP range
@@ -560,11 +563,11 @@ func TestIstioOutboundIPRangesInjection(t *testing.T) {
 	want = "10.240.10.0/14"
 	annotations = getPodAnnotationsForConfig(t, "", want)
 	if got := annotations[resources.IstioOutboundIPRangeAnnotation]; got != want {
-		t.Fatalf("%v annotation is expected to have %v but got %v", resources.IstioOutboundIPRangeAnnotation, want, got)
+		t.Fatalf("%v annotation = %v; want: %v", resources.IstioOutboundIPRangeAnnotation, got, want)
 	}
 	annotations = getPodAnnotationsForConfig(t, "10.10.10.0/24", want)
 	if got := annotations[resources.IstioOutboundIPRangeAnnotation]; got != want {
-		t.Fatalf("%v annotation is expected to have %v but got %v", resources.IstioOutboundIPRangeAnnotation, want, got)
+		t.Fatalf("%v annotation = %v; want %v", resources.IstioOutboundIPRangeAnnotation, got, want)
 	}
 }
 
@@ -606,156 +609,74 @@ func getPodAnnotationsForConfig(t *testing.T, configMapValue string, configAnnot
 	return deployment.Spec.Template.ObjectMeta.Annotations
 }
 
 func TestGlobalResyncOnConfigMapUpdateRevision(t *testing.T) {
 	defer ClearAllLoggers()
 	// Test that changes to the ConfigMap result in the desired changes on an existing
-	// revision.
+	// deployment and revision.
 	tests := []struct {
 		name              string
 		expected          string
 		configMapToUpdate *corev1.ConfigMap
-		resource          string
-		callback          func(*testing.T) func(runtime.Object) HookResult
+		wasUpdated        func(string, *v1alpha1.Revision, *appsv1.Deployment) (string, bool)
 	}{{
-		name: "Update LoggingURL", // Should update LogURL on revision
+		name:     "Update Istio Outbound IP Ranges", // Should update metadata on Deployment
+		expected: "10.0.0.1/24",
 		configMapToUpdate: &corev1.ConfigMap{
 			ObjectMeta: metav1.ObjectMeta{
+				Name:      network.ConfigName,
 				Namespace: system.Namespace(),
-				Name:      config.ObservabilityConfigName,
 			},
 			Data: map[string]string{
-				"logging.enable-var-log-collection":     "true",
-				"logging.fluentd-sidecar-image":         testFluentdImage,
-				"logging.fluentd-sidecar-output-config": testFluentdSidecarOutputConfig,
-				"logging.revision-url-template":         "http://log-here.test.com?filter=${REVISION_UID}",
+				"istio.sidecar.includeOutboundIPRanges": "10.0.0.1/24",
 			},
 		},
-		callback: func(t *testing.T) func(runtime.Object) HookResult {
-			return func(obj runtime.Object) HookResult {
-				revision := obj.(*v1alpha1.Revision)
-				t.Logf("Revision updated: %v", revision.Name)
-
-				expected := "http://log-here.test.com?filter="
-				got := revision.Status.LogURL
-				if strings.HasPrefix(got, expected) {
-					return HookComplete
-				}
-
-				t.Logf("No update occurred; expected: %s got: %s", expected, got)
-				return HookIncomplete
-			}
+		wasUpdated: func(expected string, revision *v1alpha1.Revision, deployment *appsv1.Deployment) (string, bool) {
+			annotations := deployment.Spec.Template.ObjectMeta.Annotations
+			got := annotations[resources.IstioOutboundIPRangeAnnotation]
+			return got, (got == expected)
 		},
-	}}
-
-	for _, test := range tests {
-		t.Run(test.name, func(t *testing.T) {
-			controllerConfig := getTestControllerConfig()
-			_, servingClient, _, _, controller, kubeInformer, servingInformer, cachingInformer, watcher, _ := newTestControllerWithConfig(t, controllerConfig)
-
-			stopCh := make(chan struct{})
-			grp := errgroup.Group{}
-			defer func() {
-				close(stopCh)
-				if err := grp.Wait(); err != nil {
-					t.Errorf("Wait() = %v", err)
-				}
-			}()
-
-			rev := getTestRevision()
-			revClient := servingClient.ServingV1alpha1().Revisions(rev.Namespace)
-			h := NewHooks()
-
-			h.OnUpdate(&servingClient.Fake, "revisions", test.callback(t))
-
-			servingInformer.Start(stopCh)
-			kubeInformer.Start(stopCh)
-			cachingInformer.Start(stopCh)
-			if err := watcher.Start(stopCh); err != nil {
-				t.Fatalf("Failed to start configuration manager: %v", err)
-			}
-
-			servingInformer.WaitForCacheSync(stopCh)
-			kubeInformer.WaitForCacheSync(stopCh)
-			cachingInformer.WaitForCacheSync(stopCh)
-
-			grp.Go(func() error { return controller.Run(1, stopCh) })
-
-			revClient.Create(rev)
-
-			watcher.OnChange(test.configMapToUpdate)
-
-			if err := h.WaitForHooks(1 * time.Second); err != nil {
-				t.Errorf("%s Global Resync Failed: %v", test.name, err)
-			}
-		})
-	}
-}
-
-func TestGlobalResyncOnConfigMapUpdateDeployment(t *testing.T) {
-	defer ClearAllLoggers()
-	// Test that changes to the ConfigMap result in the desired changes on an existing
-	// deployment.
-	tests := []struct {
-		name              string
-		configMapToUpdate *corev1.ConfigMap
-		callback          func(*testing.T) func(runtime.Object) HookResult
-	}{{
-		name: "Update Istio Outbound IP Ranges", // Should update metadata on Deployment
+	}, {
+		name:     "Disable Fluentd", // Should remove fluentd from Deployment
+		expected: "",
 		configMapToUpdate: &corev1.ConfigMap{
 			ObjectMeta: metav1.ObjectMeta{
-				Name:      network.ConfigName,
 				Namespace: system.Namespace(),
+				Name:      config.ObservabilityConfigName,
 			},
 			Data: map[string]string{
-				"istio.sidecar.includeOutboundIPRanges": "10.0.0.1/24",
+				"logging.enable-var-log-collection": "false",
 			},
 		},
-		callback: func(t *testing.T) func(runtime.Object) HookResult {
-			return func(obj runtime.Object) HookResult {
-				deployment := obj.(*appsv1.Deployment)
-				t.Logf("Deployment updated: %v", deployment.Name)
-
-				expected := "10.0.0.1/24"
-				annotations := deployment.Spec.Template.ObjectMeta.Annotations
-				got := annotations[resources.IstioOutboundIPRangeAnnotation]
-
-				if got != expected {
-					t.Logf("No update occurred; expected: %s got: %s", expected, got)
-					return HookIncomplete
+		wasUpdated: func(expected string, revision *v1alpha1.Revision, deployment *appsv1.Deployment) (string, bool) {
+			for _, c := range deployment.Spec.Template.Spec.Containers {
+				if c.Name == resources.FluentdContainerName {
+					return c.Image, false
 				}
-
-				return HookComplete
 			}
+			return "", true
 		},
 	}, {
-		name: "Disable Fluentd", // Should remove fluentd from Deployment
+		name:     "Update LoggingURL", // Should update LogURL on revision
+		expected: "http://log-here.test.com?filter=",
 		configMapToUpdate: &corev1.ConfigMap{
 			ObjectMeta: metav1.ObjectMeta{
 				Namespace: system.Namespace(),
 				Name:      config.ObservabilityConfigName,
 			},
 			Data: map[string]string{
-				"logging.enable-var-log-collection": "false",
+				"logging.enable-var-log-collection":     "true",
+				"logging.fluentd-sidecar-image":         testFluentdImage,
+				"logging.fluentd-sidecar-output-config": testFluentdSidecarOutputConfig,
+				"logging.revision-url-template":         "http://log-here.test.com?filter=${REVISION_UID}",
 			},
 		},
-		callback: func(t *testing.T) func(runtime.Object) HookResult {
-			return func(obj runtime.Object) HookResult {
-				deployment := obj.(*appsv1.Deployment)
-				t.Logf("Deployment updated: %v", deployment.Name)
-
-				expected := ""
-
-				for _, c := range deployment.Spec.Template.Spec.Containers {
-					if c.Name == resources.FluentdContainerName {
-						t.Logf("No update occurred; expected: %s got: %s", expected, c.Image)
-						return HookIncomplete
-					}
-				}
-				return HookComplete
-			}
+		wasUpdated: func(expected string, revision *v1alpha1.Revision, deployment *appsv1.Deployment) (string, bool) {
+			got := revision.Status.LogURL
+			return got, strings.HasPrefix(got, expected)
 		},
 	}, {
-		name: "Update Fluentd Image", // Should Fluentd to Deployment
+		name:     "Update Fluentd Image", // Should Fluentd to Deployment
+		expected: "newFluentdImage",
 		configMapToUpdate: &corev1.ConfigMap{
 			ObjectMeta: metav1.ObjectMeta{
 				Namespace: system.Namespace(),
@@ -767,27 +688,21 @@ func TestGlobalResyncOnConfigMapUpdateDeployment(t *testing.T) {
 				"logging.fluentd-sidecar-output-config": testFluentdSidecarOutputConfig,
 			},
 		},
-		callback: func(t *testing.T) func(runtime.Object) HookResult {
-			return func(obj runtime.Object) HookResult {
-				deployment := obj.(*appsv1.Deployment)
-				t.Logf("Deployment updated: %v", deployment.Name)
-
-				expected := "newFluentdImage"
-				var got string
-				for _, c := range deployment.Spec.Template.Spec.Containers {
-					if c.Name == resources.FluentdContainerName {
-						got = c.Image
-						if got == expected {
-							return HookComplete
-						}
+		wasUpdated: func(expected string, revision *v1alpha1.Revision, deployment *appsv1.Deployment) (string, bool) {
+			var got string
+			for _, c := range deployment.Spec.Template.Spec.Containers {
+				if c.Name == resources.FluentdContainerName {
+					got = c.Image
+					if got == expected {
+						return got, true
 					}
 				}
-				t.Logf("No update occurred; expected: %s got: %s", expected, got)
-				return HookIncomplete
 			}
+			return got, false
 		},
 	}, {
-		name: "Update QueueProxy Image", // Should update queueSidecarImage
+		name:     "Update QueueProxy Image", // Should update queueSidecarImage
+		expected: "myAwesomeQueueImage",
 		configMapToUpdate: &corev1.ConfigMap{
 			ObjectMeta: metav1.ObjectMeta{
 				Namespace: system.Namespace(),
@@ -797,72 +712,75 @@ func TestGlobalResyncOnConfigMapUpdateDeployment(t *testing.T) {
 				"queueSidecarImage": "myAwesomeQueueImage",
 			},
 		},
-		callback: func(t *testing.T) func(runtime.Object) HookResult {
-			return func(obj runtime.Object) HookResult {
-				deployment := obj.(*appsv1.Deployment)
-				t.Logf("Deployment updated: %v", deployment.Name)
-
-				expected := "myAwesomeQueueImage"
-
-				var got string
-				for _, c := range deployment.Spec.Template.Spec.Containers {
-					if c.Name == resources.QueueContainerName {
-						got = c.Image
-						if got == expected {
-							return HookComplete
-						}
+		wasUpdated: func(expected string, revision *v1alpha1.Revision, deployment *appsv1.Deployment) (string, bool) {
+			var got string
+			for _, c := range deployment.Spec.Template.Spec.Containers {
+				if c.Name == resources.QueueContainerName {
+					got = c.Image
+					if got == expected {
+						return got, true
 					}
 				}
-
-				t.Logf("No update occurred; expected: %s got: %s", expected, got)
-				return HookIncomplete
 			}
+			return got, false
 		},
 	}}
 
+	// Setup the API machinery.
+	controllerConfig := getTestControllerConfig()
+	kubeClient, servingClient, _, _, controller, kubeInformer, servingInformer, cachingInformer, watcher, _ := newTestControllerWithConfig(t, controllerConfig)
+	stopCh := make(chan struct{})
+	var eg errgroup.Group
+	defer func() {
+		close(stopCh)
+		// Controller.Run never returns an error.
+		eg.Wait()
+	}()
+
+	servingInformer.Start(stopCh)
+	kubeInformer.Start(stopCh)
+	cachingInformer.Start(stopCh)
+
+	servingInformer.WaitForCacheSync(stopCh)
+	kubeInformer.WaitForCacheSync(stopCh)
+	cachingInformer.WaitForCacheSync(stopCh)
+	if err := watcher.Start(stopCh); err != nil {
+		t.Fatalf("Failed to start configuration manager: %v", err)
+	}
+	eg.Go(func() error { return controller.Run(1, stopCh) })
+	revClient := servingClient.ServingV1alpha1().Revisions(testNamespace)
+	deploymentsClient := kubeClient.Apps().Deployments(testNamespace)
+	logger := &tlogging.BaseLogger{Logger: TestLogger(t)}
+
 	for _, test := range tests {
+		test := test
 		t.Run(test.name, func(t *testing.T) {
-			controllerConfig := getTestControllerConfig()
-			kubeClient, servingClient, _, _, controller, kubeInformer, servingInformer, cachingInformer, watcher, _ := newTestControllerWithConfig(t, controllerConfig)
-
-			stopCh := make(chan struct{})
-			grp := errgroup.Group{}
-			defer func() {
-				close(stopCh)
-				if err := grp.Wait(); err != nil {
-					t.Errorf("Wait() = %v", err)
-				}
-			}()
-
 			rev := getTestRevision()
-			revClient := servingClient.ServingV1alpha1().Revisions(rev.Namespace)
+			rev.ObjectMeta.Name = ktest.AppendRandomString("my-revision-", logger)
+			revClient.Create(rev)
 			h := NewHooks()
-			h.OnUpdate(&kubeClient.Fake, "deployments", test.callback(t))
 
-			// Wait for the deployment creation to trigger the global resync. This
-			// avoids the create and update being coalesced into one event.
-			h.OnCreate(&kubeClient.Fake, "deployments", func(obj runtime.Object) HookResult {
-				watcher.OnChange(test.configMapToUpdate)
+			h.OnUpdate(&servingClient.Fake, "revisions", func(obj runtime.Object) HookResult {
+				updatedRev := obj.(*v1alpha1.Revision)
+				t.Logf("Revision updated: %v", updatedRev.Name)
+				updatedDeployment, err := deploymentsClient.Get(resourcenames.Deployment(updatedRev), metav1.GetOptions{})
+				if err != nil {
+					t.Error(err)
+				}
+
+				got, wasUpdated := test.wasUpdated(test.expected, updatedRev, updatedDeployment)
+				if !wasUpdated {
+					t.Logf("No update occurred; got: %s, want: %s", got, test.expected)
+					return HookIncomplete
+				}
+				// Look for expected change.
 				return HookComplete
 			})
 
-			servingInformer.Start(stopCh)
-			kubeInformer.Start(stopCh)
-			cachingInformer.Start(stopCh)
-			if err := watcher.Start(stopCh); err != nil {
-				t.Fatalf("Failed to start configuration manager: %v", err)
-			}
-
-			servingInformer.WaitForCacheSync(stopCh)
-			kubeInformer.WaitForCacheSync(stopCh)
-			cachingInformer.WaitForCacheSync(stopCh)
-
-			grp.Go(func() error { return controller.Run(1, stopCh) })
-
-			revClient.Create(rev)
+			watcher.OnChange(test.configMapToUpdate)
 
 			if err := h.WaitForHooks(3 * time.Second); err != nil {
-				t.Errorf("%s Global Resync Failed: %v", test.name, err)
+				t.Error("Global Resync Failed: ", err)
 			}
 		})
 	}
