diff --git a/pkg/activator/net/revision_backends.go b/pkg/activator/net/revision_backends.go
index 5aa8f70e8..d84aeb9a3 100644
--- a/pkg/activator/net/revision_backends.go
+++ b/pkg/activator/net/revision_backends.go
@@ -68,12 +68,11 @@ const (
 // revisionWatcher watches the podIPs and ClusterIP of the service for a revision. It implements the logic
 // to supply revisionDestsUpdate events on updateCh
 type revisionWatcher struct {
-	stopCh   <-chan struct{}
+	doneCh   <-chan struct{}
 	cancel   context.CancelFunc
 	rev      types.NamespacedName
 	protocol networking.ProtocolType
 	updateCh chan<- revisionDestsUpdate
-	done     chan struct{}
 
 	// Stores the list of pods that have been successfully probed.
 	healthyPods sets.String
@@ -96,12 +95,11 @@ func newRevisionWatcher(ctx context.Context, rev types.NamespacedName, protocol
 	logger *zap.SugaredLogger) *revisionWatcher {
 	ctx, cancel := context.WithCancel(ctx)
 	return &revisionWatcher{
-		stopCh:          ctx.Done(),
+		doneCh:          ctx.Done(),
 		cancel:          cancel,
 		rev:             rev,
 		protocol:        protocol,
 		updateCh:        updateCh,
-		done:            make(chan struct{}),
 		healthyPods:     sets.NewString(),
 		transport:       transport,
 		destsCh:         destsCh,
@@ -220,7 +218,7 @@ func (rw *revisionWatcher) probePodIPs(dests sets.String) (sets.String, bool, er
 
 func (rw *revisionWatcher) sendUpdate(clusterIP string, dests sets.String) {
 	select {
-	case <-rw.stopCh:
+	case <-rw.doneCh:
 		return
 	default:
 		rw.updateCh <- revisionDestsUpdate{Rev: rw.rev, ClusterIPDest: clusterIP, Dests: dests}
@@ -295,7 +293,7 @@ func (rw *revisionWatcher) checkDests(dests sets.String) {
 }
 
 func (rw *revisionWatcher) run(probeFrequency time.Duration) {
-	defer close(rw.done)
+	defer close(rw.destsCh)
 
 	var dests sets.String
 	timer := time.NewTicker(probeFrequency)
@@ -316,7 +314,7 @@ func (rw *revisionWatcher) run(probeFrequency time.Duration) {
 		}
 
 		select {
-		case <-rw.stopCh:
+		case <-rw.doneCh:
 			return
 		case x := <-rw.destsCh:
 			dests = x
@@ -388,7 +386,7 @@ func newRevisionBackendsManagerWithProbeFrequency(ctx context.Context, tr http.R
 		rbm.revisionWatchersMux.Lock()
 		defer rbm.revisionWatchersMux.Unlock()
 		for _, rw := range rbm.revisionWatchers {
-			<-rw.done
+			<-rw.destsCh
 		}
 	}()
 
@@ -449,11 +447,7 @@ func (rbm *revisionBackendsManager) endpointsUpdated(newObj interface{}) {
 	}
 	dests := endpointsToDests(endpoints, networking.ServicePortName(rw.protocol))
 	rbm.logger.Debugf("Updating Endpoints: %q (backends: %d)", revID.String(), len(dests))
-	select {
-	case <-rbm.ctx.Done():
-		return
-	case rw.destsCh <- dests:
-	}
+	rw.destsCh <- dests
 }
 
 // deleteRevisionWatcher deletes the revision watcher for rev if it exists. It expects
diff --git a/pkg/activator/net/revision_backends_test.go b/pkg/activator/net/revision_backends_test.go
index 335391762..c6f2db386 100644
--- a/pkg/activator/net/revision_backends_test.go
+++ b/pkg/activator/net/revision_backends_test.go
@@ -407,19 +407,19 @@ func TestRevisionWatcher(t *testing.T) {
 				t.Errorf("revisionDests updates = %v, want: %v, diff (-want, +got):\n %s", got, want, cmp.Diff(want, got))
 			}
 
-			assertChClosed(t, rw.done)
+			assertChClosed(t, destsCh)
 		})
 	}
 }
 
-func assertChClosed(t *testing.T, ch chan struct{}) {
+func assertChClosed(t *testing.T, ch chan sets.String) {
 	defer func() {
 		if r := recover(); r == nil {
 			t.Errorf("the channel was not closed")
 		}
 	}()
 	select {
-	case ch <- struct{}{}:
+	case ch <- nil:
 		// Panics if the channel is closed
 	default:
 		// Prevents from blocking forever if the channel is not closed
@@ -719,7 +719,7 @@ func TestCheckDests(t *testing.T) {
 		updateCh:         uCh,
 		serviceLister:    si.Lister(),
 		logger:           TestLogger(t),
-		stopCh:           dCh,
+		doneCh:           dCh,
 	}
 	rw.checkDests(sets.NewString("10.1.1.5"))
 	select {
@@ -800,7 +800,7 @@ func TestCheckDestsSwinging(t *testing.T) {
 		updateCh:        uCh,
 		serviceLister:   si.Lister(),
 		logger:          TestLogger(t),
-		stopCh:          dCh,
+		doneCh:          dCh,
 		podsAddressable: true,
 		transport:       network.RoundTripperFunc(fakeRT.RT),
 	}
